name: 'Unit Test Reporter'

on:
  workflow_run:
    workflows: ['Unit Test & Coverage']
    types:
      - completed
jobs:
  Check:
    runs-on: ubuntu-latest
    outputs:
      isPR: ${{ steps.main_pr.outputs.valid }}
      isPush: ${{ steps.main_push.outputs.valid }}
    env:
      isPR: ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.event == 'pull_request' }}
      isPush: ${{ github.event.workflow_run.event == 'push' }}
    steps:
      - name: Check PR
        id: main_pr
        run: echo '::set-output name=valid::${{ env.isPR }}'
      - name: Check Push
        id: main_push
        run: echo '::set-output name=valid::${{ env.isPush }}'
  Result:
    runs-on: ubuntu-latest
    needs: [Check]
    if: needs.Check.outputs.isPR == 'true' || needs.Check.outputs.isPush == 'true'
    env:
      artifactName: 'test-results'
      eventFile: 'event-file'
    steps:
    - name: Download Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const workflowInfo = await github.rest.actions.listWorkflowRunArtifacts({
            ...context.repo,
            run_id: ${{ github.event.workflow_run.id }}
          })
          if (workflowInfo.data.artifacts.length === 0) {
            console.log(`No artifact on previous workflow`)
            return
          }

          const download = async (artifactName) => {
            const artifacts = workflowInfo.data.artifacts.filter(a => a.name == artifactName)
            if (artifacts.length === 0) {
              console.log(`No artifact named ${artifactName}`)
              return
            }
            const artifact = artifacts[0]    
            const download = await github.rest.actions.downloadArtifact({
              artifact_id: artifact.id,
              archive_format: 'zip',
              ...context.repo
            })
            const fs = require('fs');
            fs.writeFileSync(`${artifactName}.zip`, Buffer.from(download.data));
          }
          download("${{ env.artifactName }}")
          download("${{ env.eventFile }}")
    - name: Extract
      run: |
        unzip ${{env.artifactName}}.zip
        unzip ${{env.eventFile}}.zip
    - name: Create Report
      uses: EnricoMi/publish-unit-test-result-action@v1
      with:
        files: '*.xml'
        commit: ${{ github.event.workflow_run.head_sha }}
        event_file: event.json
        event_name: ${{ github.event.workflow_run.event }}
